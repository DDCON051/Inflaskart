# -*- coding: utf-8 -*-
# Generated by Django 1.10.6 on 2017-06-16 00:22
from __future__ import unicode_literals

from django.conf import settings
import django.contrib.postgres.fields
import django.contrib.postgres.fields.jsonb
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Address',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('street_address1', models.CharField(max_length=100, verbose_name='Address')),
                ('street_address2', models.CharField(blank=True, max_length=100, verbose_name='Address (line 2)')),
                ('apt_nb', models.CharField(blank=True, max_length=20, verbose_name='Apt/Unit')),
                ('other', models.CharField(blank=True, max_length=50, verbose_name='Floor, building, etc.')),
                ('city', models.CharField(max_length=50)),
                ('zip_code', models.PositiveIntegerField(error_messages={'invalid': 'Please enter a valid ZIP code.'})),
            ],
            options={
                'ordering': ['state', 'city', 'street_address1'],
                'verbose_name_plural': 'addresses',
            },
        ),
        migrations.CreateModel(
            name='Availability',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('product_unit', models.CharField(max_length=20, verbose_name='unit')),
                ('product_price', models.DecimalField(decimal_places=2, default=0.0, max_digits=5, verbose_name='price')),
            ],
            options={
                'ordering': ['store__store_name', 'store__store_location', 'product__product_category__parent__top_category', 'product__product_category__sub_category_name', 'product__product_name'],
                'verbose_name_plural': 'availabilities',
            },
        ),
        migrations.CreateModel(
            name='Dietary',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30, verbose_name='dietary')),
            ],
            options={
                'ordering': ['name'],
                'verbose_name_plural': 'dietaries',
            },
        ),
        migrations.CreateModel(
            name='Inflauser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('infla_user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('inflauser_address', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='grocerystore.Address')),
            ],
            options={
                'ordering': ['infla_user__username'],
            },
        ),
        migrations.CreateModel(
            name='ItemInCart',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('incart_quantity', models.FloatField()),
                ('incart_availability', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='grocerystore.Availability')),
                ('incart_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['incart_availability__product__product_name'],
            },
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data', django.contrib.postgres.fields.jsonb.JSONField()),
            ],
            options={
                'ordering': ['-pk'],
            },
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('product_name', models.CharField(max_length=60, verbose_name='product')),
                ('product_brand_or_variety', models.CharField(blank=True, max_length=50, verbose_name='product brand/variety')),
                ('product_description', models.TextField(blank=True)),
                ('product_pic', models.ImageField(blank=True, upload_to='products/', verbose_name='product picture')),
                ('user_id_required', models.BooleanField(default=False, verbose_name='ID required')),
                ('taxability', models.BooleanField(default=True)),
            ],
            options={
                'ordering': ['product_name'],
            },
        ),
        migrations.CreateModel(
            name='ProductCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('top_category', models.CharField(max_length=30, verbose_name='top product category')),
            ],
            options={
                'ordering': ['top_category'],
                'verbose_name_plural': 'product categories',
            },
        ),
        migrations.CreateModel(
            name='ProductPurchaseHistory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('purchase_dates', django.contrib.postgres.fields.ArrayField(base_field=models.DateTimeField(), size=None)),
                ('nb_of_purchases', models.PositiveIntegerField(default=1)),
                ('bought_product', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='grocerystore.Product')),
                ('customer', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['customer__username', 'bought_product__product_name'],
            },
        ),
        migrations.CreateModel(
            name='ProductSubCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sub_category_name', models.CharField(max_length=30, verbose_name='product sub-category')),
                ('parent', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='grocerystore.ProductCategory', verbose_name='top product category')),
            ],
            options={
                'ordering': ['parent__top_category', 'sub_category_name'],
                'verbose_name': 'product sub-category',
                'verbose_name_plural': 'product sub-categories',
            },
        ),
        migrations.CreateModel(
            name='State',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('state_name', models.CharField(max_length=50)),
                ('state_postal_code', models.CharField(max_length=2)),
            ],
            options={
                'ordering': ['state_name', 'state_postal_code'],
            },
        ),
        migrations.CreateModel(
            name='Store',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('store_name', models.CharField(max_length=30, verbose_name='store')),
                ('store_location', models.CharField(max_length=30, verbose_name='location name')),
                ('store_address', models.CharField(max_length=200, verbose_name='Address')),
                ('store_city', models.CharField(max_length=30, verbose_name='city')),
                ('store_zipcode', models.PositiveIntegerField(error_messages={'invalid': 'Please enter a valid ZIP code.'})),
                ('store_pic', models.ImageField(blank=True, upload_to='stores/', verbose_name='logo/picture')),
            ],
            options={
                'ordering': ['store_name', 'store_state', 'store_city', 'store_location'],
            },
        ),
        migrations.CreateModel(
            name='Zipcode',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('zipcode', models.PositiveIntegerField(error_messages={'invalid': 'Please enter a valid ZIP code.'})),
                ('zip_city', models.CharField(max_length=50)),
                ('zip_state', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='grocerystore.State')),
            ],
            options={
                'ordering': ['zip_city', 'zipcode'],
            },
        ),
        migrations.AddField(
            model_name='store',
            name='delivery_area',
            field=models.ManyToManyField(to='grocerystore.Zipcode'),
        ),
        migrations.AddField(
            model_name='store',
            name='store_state',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='grocerystore.State', verbose_name='state'),
        ),
        migrations.AddField(
            model_name='productpurchasehistory',
            name='purchase_store',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='grocerystore.Store'),
        ),
        migrations.AddField(
            model_name='product',
            name='product_category',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='grocerystore.ProductSubCategory'),
        ),
        migrations.AddField(
            model_name='product',
            name='product_dietary',
            field=models.ManyToManyField(blank=True, to='grocerystore.Dietary'),
        ),
        migrations.AddField(
            model_name='product',
            name='product_store',
            field=models.ManyToManyField(through='grocerystore.Availability', to='grocerystore.Store', verbose_name='availability(ies) in store(s)'),
        ),
        migrations.AddField(
            model_name='availability',
            name='product',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='grocerystore.Product'),
        ),
        migrations.AddField(
            model_name='availability',
            name='store',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='grocerystore.Store'),
        ),
        migrations.AddField(
            model_name='address',
            name='state',
            field=models.ForeignKey(error_messages={'invalid': 'Please enter a valid ZIP code.'}, on_delete=django.db.models.deletion.CASCADE, to='grocerystore.State'),
        ),
    ]
